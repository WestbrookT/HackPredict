Cities crave data to make smarter decisions, and the Internet of Things allows us to automate the collection and processing of data throughout the day. Roads are a particularly important component of infrastructure, and are some of the most difficult to monitor and quantify efficiently. Citizens and local government can work together to pinpoint the areas that are most in need of improvement by identifying potholes and rough spots, and then use that data to find better routes as well as efficiently funnel much needed repairs to problem areas.
There's a lot of money in infrastructure too. In President Obama's 2013 State of the Union address he called for $40B to improve existing infrastructure, citing failing bridges and roadways among the problems bottlenecking our economy. This is a drop in the bucket compared to $1.7T the Society of Civil Engineers estimated we would need to spend in order to bring the quality of our roads to first-world condition. Using data, we can effectively target investments to begin seeing improvements quickly.
We built a system using an Intel Edison that aggregates GPS and accelerometer data into a file that is then parsed and uploaded onto a map. The data identifies sudden drops and aggregates the information into a text file on the on-board SD Card. A python script then pulls that data and processes it in an Atlantic.net server, and maps it using Esri APIs. The complete project can fit inside a small box that bikers, drivers and city fleets can carry with them throughout the day.
We had a hard time getting the GPS and accelerometer to read correctly because the Arduino libraries provided don't always work well with the Edison board. Once we got those running, we realized trying to push that much data directly through to the server would overwhelm the network, which is why we decided to create a batch file that can be uploaded after a set amount of data is gathered. 
We also faced some difficulties storing and transmitting the data logged because of issues with the SD Card. 
We were able to cobble together some disparate pieces of hardware and almost had a working, wireless demo. 
While having a lot of granular data is useful, there have to be efficient ways to use this. 