TJ's renovation has left hundreds of students stuck in congested hallways and late for class day after day. We made this program to help students get to class as efficiently as possible.
Our project has two fundamental parts; an algorithm for compiling hallway traffic data and a version of the well known A* search algorithm. First, our program analyzes the schedule of every student in a given institution and determines which hallways they are most likely to be in between specific classes by taking the path of shortest distance. With this data, we construct a new graph in which edge weightings are also a function of traffic, not just distance. We then use our "shortest-walk" algorithm to determine what we think will be the quickest route for our user. 
Creating a map of a whole school was difficult, especially with TJ being under construction. Web programming was also challenging.
Identifying a good algorithm for our problem was a big step. Furthermore, all of our group members had to learn to us either a new language or a new tool during this hackathon.
The use of GitHub and CSS style sheets, as well as fundamentals of traffic flow theory.
Once many users are using our programs, we would encounter what is called Braess's paradox, which would not be ideal. If such a situation were to arise, we would attempt to transition to a live-updating mobile platform where each active user contributes to the accuracy of the traffic model.