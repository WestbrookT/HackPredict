A great heist needs to have a great soundtrack and, as every thief knows, if you don’t have one, you need to make your own.  In Grand Theft Audio, the player controls a thief who will only respond to the music he hears.  Make lots of quick, quiet sounds to sneak, and make long sustained notes to hide.  Leverage the power of VR to take in your surroundings and figure out the best hiding spots. Sneak to the treasure and steal it. Also you're a squirrel now.
Grand Theft Audio is broken into two modes, movement – where you see the side view of the character and world, and perspective – where you see the world from behind the character and can interact with the world. 
In movement mode the player sees the world from a side view. To move the character they need to make sneaky music with their mouth.  We are looking for distinct notes. 
“Dun. Dun. Dun. Dun. “ will work better than “Dundundundun” each dun is representative of one step roughly. 
Switching to Perspective mode – To switch from movement to perspective mode, make a long sustained sound (“Dun. Dun. Dun. Dun. Duuuuuuuuuuuuuuuun.”  Any note longer than 1 second will work). 
Each of these require a certain volume level, there is a meter in game, found near the top of the screen, which will assist in knowing how loud to be. When it turns from white to green you are hitting an appropriate decibel.
In perspective mode the player can examine the environment more closely and interact with some objects. Objects that can be interacted with will change when the player looks at them and the reticle will change from red to green. To interact with any object touch on the touch panel of the Gear VR. Currently the only objects that you can interact with are hiding spots.  (Also hiding is broken…)
Switching back to Movement Mode – Make any sound loud enough to be registered in the green range of audio level UI. 
The player takes on the role of a thieving squirrel in search of the greatest acorn in existence. In the game the player makes sneaky music to move through the space and drawn out notes to hide. 
Our primary game input is audio input as our main way to interact with the game. We are also using a camera view which is not first person and shifting perspectives through play.
It turns out that when processing the microphone input in Unity on the Galaxy Note 4, the Microphone API in Unity cycles through the length of the AudioClip attached to it before actually processing sound, rather than taking it in real time, which it does on the PC. Our best counter for this was to make the AudioClip length as short as possible to reduce the latency, but because Microphone.Start() only takes in ints for clip length, there is a delay of at least 1 second in processing sound. There are also more frame rate skips because of the buffer reloading when the AudioClip loops.
We severely underestimated the amount of time required for graduate school finals. This caused us to spend much less time than desired on this challenge. However, we are interested enough in what we made that we plan to spend the summer developing this further. 